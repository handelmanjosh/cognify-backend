generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String  @id @default(uuid())
  bio      String? @db.Text
  name     String? @db.VarChar(50)
  location String? @db.VarChar(15)
  team     String? @db.VarChar(20)
  user     User?
}

model UserPreferences {
  id                      String  @id @default(uuid())
  user                    User?
  emailUpdates            Boolean @default(true)
  fileUploadNotifications Boolean @default(true)
}

enum Role {
  USER
  ADMIN
}

model User {
  id                   String                 @id @default(uuid())
  password             String                 @db.VarChar(100)
  email                String                 @unique @db.VarChar(100)
  sessionId            String?                @unique @db.VarChar(300)
  role                 Role                   @default(USER)
  profile              Profile?               @relation(fields: [profileId], references: [id])
  profileId            String?                @unique
  preferences          UserPreferences?       @relation(fields: [preferenceId], references: [id])
  preferenceId         String?                @unique
  uploaded             File[]                 @relation("UploadedBy")
  usersOnOrganizations UsersOnOrganizations[]
  createdAt            DateTime               @default(now())

  @@index(sessionId)
  @@index(email)
}

model Chat {
  id       String               @id @default(uuid())
  messages Message[]
  title    String
  userId   String
  userOrg  UsersOnOrganizations @relation(fields: [userId], references: [id])
  maxIndex Int                  @default(0)

  @@index([id])
}

model Message {
  id      String @id @default(uuid())
  message String @db.LongText
  type    String
  chatId  String
  index   Int
  chat    Chat   @relation(fields: [chatId], references: [id])
}

enum UserType {
  OWNER
  ADMIN
  MEMBER
  POTENTIAL
}

model UsersOnOrganizations {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  chat           Chat[]
  type           UserType
  assignedAt     DateTime     @default(now())
}

model Organization {
  id                   String                 @id @default(uuid())
  name                 String
  code                 String                 @unique @db.VarChar(8)
  settings             OrganizationSettings?  @relation("OrgSettings", fields: [settingsId], references: [id])
  settingsId           String?                @unique
  files                File[]                 @relation("File")
  usersOnOrganizations UsersOnOrganizations[]
  createdAt            DateTime               @default(now())

  @@index(code)
}

model OrganizationSettings {
  id           String        @id @default(uuid())
  organization Organization? @relation("OrgSettings")
}

model File {
  id             String        @id @default(uuid())
  name           String
  type           String
  key            String        @unique
  url            String        @unique
  organization   Organization? @relation("File", fields: [organizationId], references: [id])
  organizationId String?
  uploadedBy     User          @relation("UploadedBy", fields: [uploadedUserId], references: [id])
  uploadedUserId String
  uploadedAt     DateTime      @default(now())
}

model orgCodes {
  id   Int    @id @default(autoincrement())
  code String

  @@index(code)
}
